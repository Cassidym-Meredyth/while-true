#!/bin/sh
set -eu

: "${POSTGRES_USER:?POSTGRES_USER is required}"
: "${POSTGRES_DB:?POSTGRES_DB is required}"
: "${MIGRATOR_USER:?MIGRATOR_USER is required}"
: "${MIGRATOR_PASSWORD:?MIGRATOR_PASSWORD is required}"
: "${APP_USER:?APP_USER is required}"
: "${APP_USER_PASSWORD:?APP_USER_PASSWORD is required}"

psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<SQL
-- 1) Роли приложения
DO \$\$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${APP_USER}') THEN
    CREATE ROLE ${APP_USER} LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE;
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${MIGRATOR_USER}') THEN
    CREATE ROLE ${MIGRATOR_USER} LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE;
  END IF;
END
\$\$;

ALTER ROLE ${APP_USER}     WITH PASSWORD '${APP_USER_PASSWORD}';
ALTER ROLE ${MIGRATOR_USER} WITH PASSWORD '${MIGRATOR_PASSWORD}';

-- 2) Схема и базовые права
CREATE SCHEMA IF NOT EXISTS app AUTHORIZATION ${APP_USER};

-- migrator сможет создавать объекты в app
GRANT USAGE, CREATE ON SCHEMA app TO ${MIGRATOR_USER};
GRANT USAGE ON SCHEMA app TO ${APP_USER};

-- 3) search_path и дефолтные привилегии для migrator'а (его объекты доступны app_user)
ALTER ROLE ${APP_USER} IN DATABASE ${POSTGRES_DB} SET search_path = app, public;

ALTER DEFAULT PRIVILEGES FOR ROLE ${MIGRATOR_USER} IN SCHEMA app
  GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO ${APP_USER};

ALTER DEFAULT PRIVILEGES FOR ROLE ${MIGRATOR_USER} IN SCHEMA app
  GRANT USAGE, SELECT ON SEQUENCES TO ${APP_USER};

-- 4) Гигиена PUBLIC
DO \$\$
DECLARE db text := current_database();
BEGIN
  EXECUTE 'REVOKE CREATE ON SCHEMA public FROM PUBLIC';
  EXECUTE format('REVOKE ALL ON DATABASE %I FROM PUBLIC', db);
  EXECUTE format('GRANT CONNECT ON DATABASE %I TO ${APP_USER}', db);
END
\$\$;
SQL
